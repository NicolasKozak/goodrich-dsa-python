import os
from os import path as os_path

ch1_aliases = {
    "ch1_ex1_sc1": os_path.join("solutions", "exercises", "ch1", "ex1", "using_modulo"),
    "ch1_ex1_sc2": os_path.join("solutions", "exercises", "ch1", "ex1", "without_modulo"),
    "ch1_ex2_sc1": os_path.join("solutions", "exercises", "ch1", "ex2", "is_even"),
    "ch1_ex3_sc1": os_path.join("solutions", "exercises", "ch1", "ex3", "minmax"),
    "ch1_ex4_sc1": os_path.join("solutions", "exercises", "ch1", "ex4", "sum_of_squares"),
    "ch1_ex5_sc1": os_path.join("solutions", "exercises", "ch1", "ex5", "sum_of_squares"),
    "ch1_ex6_sc1": os_path.join("solutions", "exercises", "ch1", "ex6", "sum_of_odd_squares"),
    "ch1_ex7_sc1": os_path.join("solutions", "exercises", "ch1", "ex7", "sum_of_odd_squares"),
    "ch1_ex8_sc1": os_path.join("solutions", "exercises", "ch1", "ex8", "equivalent_index"),
    "ch1_ex9_sc1": os_path.join("solutions", "exercises", "ch1", "ex9", "range_increasing_by_10"),
    "ch1_ex10_sc1": os_path.join("solutions", "exercises", "ch1", "ex10", "range_decreasing_by_2"),
    "ch1_ex11_sc1": os_path.join("solutions", "exercises", "ch1", "ex11", "range_of_powers_of_2"),
    "ch1_ex12_sc1": os_path.join("solutions", "exercises", "ch1", "ex12", "choice"),

    "ch1_ex13_sc1": os_path.join("solutions", "exercises", "ch1", "ex13", "non_destructive_reverse"),
    "ch1_ex13_sc2": os_path.join("solutions", "exercises", "ch1", "ex13", "destructive_reverse"),
    "ch1_ex14_sc1": os_path.join("solutions", "exercises", "ch1", "ex14", "odd_product_pair"),
    "ch1_ex15_sc1": os_path.join("solutions", "exercises", "ch1", "ex15", "is_distinct"),
    "ch1_ex16_sc1": os_path.join("solutions", "exercises", "ch1", "ex16", "scale"),
    "ch1_ex17_sc1": os_path.join("solutions", "exercises", "ch1", "ex17", "scale"),
    "ch1_ex18_sc1": os_path.join("solutions", "exercises", "ch1", "ex18", "int_prod_seq"),
    "ch1_ex19_sc1": os_path.join("solutions", "exercises", "ch1", "ex19", "chr_seq"),
    "ch1_ex20_sc1": os_path.join("solutions", "exercises", "ch1", "ex20", "shuffle"),
    "ch1_ex21_sc1": os_path.join("solutions", "exercises", "ch1", "ex21", "print_entered_lines_in_reverse"),
    "ch1_ex22_sc1": os_path.join("solutions", "exercises", "ch1", "ex22", "dot_product"),
    "ch1_ex23_sc1": os_path.join("solutions", "exercises", "ch1", "ex23", "buffer_overflow"),
    "ch1_ex24_sc1": os_path.join("solutions", "exercises", "ch1", "ex24", "vowel_count"),
    "ch1_ex25_sc1": os_path.join("solutions", "exercises", "ch1", "ex25", "strip_punct"),
    "ch1_ex25_sc2": os_path.join("solutions", "exercises", "ch1", "ex25", "strip_punct_with_regex"),
    "ch1_ex26_sc1": os_path.join("solutions", "exercises", "ch1", "ex26", "match_arth_expr"),
    "ch1_ex27_sc1": os_path.join("solutions", "exercises", "ch1", "ex27", "increasing_factors_time_optimized"),
    "ch1_ex27_sc2": os_path.join("solutions", "exercises", "ch1", "ex27", "increasing_factors_memory_optimized"),
    "ch1_ex28_sc1": os_path.join("solutions", "exercises", "ch1", "ex28", "p_norm"),

    "ch1_ex29_sc1": os_path.join("solutions", "exercises", "P", "ch1", "ex29", "permute_str_by_recursion"),
    "ch1_ex29_sc2": os_path.join("solutions", "exercises", "P", "ch1", "ex29", "permute_str_by_iteration"),
    "ch1_ex30_sc1": os_path.join("solutions", "exercises", "P", "ch1", "ex30", "divide_by_two_iteration"),
    "ch1_ex30_sc2": os_path.join("solutions", "exercises", "P", "ch1", "ex30", "divide_by_two_recursion"),
    "ch1_ex31_sc1": os_path.join("solutions", "exercises", "P", "ch1", "ex31", "make_us_change"),
    "ch1_ex34_sc1": os_path.join("solutions", "exercises", "P", "ch1", "ex34", "rand_typos"),
    "ch1_ex35_sc1": os_path.join("solutions", "exercises", "P", "ch1", "ex35", "birthday_paradox"),
    "ch1_ex36_sc1": os_path.join("solutions", "exercises", "P", "ch1", "ex36", "word_count")
}
